{"ast":null,"code":"var _jsxFileName = \"/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/components/ReportGeneratorApp.jsx\",\n  _s = $RefreshSig$();\n// src/components/ReportGeneratorApp.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\n\n// Components\nimport InputMethodSelector from './InputPanel/InputMethodSelector';\nimport ManualDataEntry from './InputPanel/ManualDataEntry';\nimport ExcelUploader from './InputPanel/ExcelUploader';\nimport ReportRenderer from './ReportPanel/ReportRenderer'; // This will orchestrate report sections\n\n// Hooks\nimport { useLibrary } from '../hooks/useLibrary';\nimport { useFinancialCalculator } from '../hooks/useFinancialCalculator';\nimport { useExcelParser } from '../hooks/useExcelParser';\n\n// Utils\nimport { fieldDefinitions, getFieldKeys, validateAllFields } from '../utils/fieldDefinitions';\nimport { DEFAULT_PERIODS_MANUAL, DEFAULT_PERIODS_EXCEL, GREY_RGB_FILL, BLUE_HEADER_FILL } from '../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReportGeneratorApp() {\n  _s();\n  // UI State & Global App Info\n  const [inputMethod, setInputMethod] = useState('manual');\n  const [companyName, setCompanyName] = useState('Empresa Exemplo S.A.');\n  const [reportTitle, setReportTitle] = useState('Análise Financeira com Fluxo de Caixa');\n\n  // Data State\n  const [numberOfPeriods, setNumberOfPeriods] = useState(DEFAULT_PERIODS_MANUAL); // Controls manual entry form & template download periods\n  const [periodType, setPeriodType] = useState('anos');\n  const [manualInputData, setManualInputData] = useState([]); // For manual entry form\n  const [calculatedData, setCalculatedData] = useState([]); // Final processed data for report\n\n  // Error State\n  const [appError, setAppError] = useState(null); // General errors for display\n\n  // Hooks\n  const {\n    library: ExcelJS,\n    loadLibrary: loadExcelJS,\n    isLoading: isLoadingExcelJS,\n    error: excelJsError\n  } = useLibrary('ExcelJS');\n  const {\n    library: html2pdf,\n    loadLibrary: loadHtml2pdf,\n    isLoading: isLoadingHtml2pdf,\n    error: html2pdfError\n  } = useLibrary('html2pdf');\n  const {\n    calculate,\n    isCalculating,\n    calculationError\n  } = useFinancialCalculator();\n  const {\n    parseFile,\n    isParsing,\n    parsingError\n  } = useExcelParser();\n\n  // Initialize/reset manualInputData when numberOfPeriods or inputMethod changes\n  useEffect(() => {\n    if (inputMethod === 'manual') {\n      const currentNumPeriods = numberOfPeriods; // Use the state directly\n      const fieldKeys = getFieldKeys();\n      const newInputData = Array(currentNumPeriods).fill(null).map((_, periodIndex) => {\n        const existingPeriod = manualInputData[periodIndex] || {};\n        const newPeriod = {};\n        fieldKeys.forEach(fieldKey => {\n          const def = fieldDefinitions[fieldKey];\n          if (def.firstPeriodOnly && periodIndex > 0) {\n            newPeriod[fieldKey] = null;\n          } else {\n            newPeriod[fieldKey] = existingPeriod[fieldKey] === undefined ? null : existingPeriod[fieldKey];\n          }\n        });\n        return newPeriod;\n      });\n      setManualInputData(newInputData);\n    } else {\n      // Excel mode\n      setNumberOfPeriods(DEFAULT_PERIODS_EXCEL); // Default to 2 for Excel mode context, template download reflects this\n      setManualInputData([]); // Clear manual data if switching to Excel\n    }\n  }, [numberOfPeriods, inputMethod]); // Removed manualInputData to avoid loop if not careful\n\n  // Combined loading state\n  const isProcessing = isLoadingExcelJS || isParsing || isCalculating;\n\n  // Clear errors when main inputs change\n  useEffect(() => {\n    setAppError(null);\n  }, [companyName, reportTitle, inputMethod]);\n\n  // Aggregate errors for display\n  useEffect(() => {\n    if (excelJsError) setAppError(excelJsError);else if (html2pdfError) setAppError(html2pdfError);else if (parsingError) setAppError(parsingError);else if (calculationError) setAppError(calculationError);else setAppError(null); // Clear if no hook errors\n  }, [excelJsError, html2pdfError, parsingError, calculationError]);\n  const handleInputMethodChange = useCallback(method => {\n    setInputMethod(method);\n    setCalculatedData([]); // Clear results when switching method\n    setAppError(null);\n    if (method === 'manual') {\n      setNumberOfPeriods(DEFAULT_PERIODS_MANUAL); // Reset to default for manual\n    } else {\n      setNumberOfPeriods(DEFAULT_PERIODS_EXCEL); // Reset to default for excel\n      setManualInputData([]); // Clear manual input data\n    }\n  }, []);\n  const handleManualInputChange = useCallback((periodIndex, fieldKey, value) => {\n    setManualInputData(prevData => {\n      const updatedData = [...prevData];\n      const numericValue = value === '' ? null : Number(value);\n      updatedData[periodIndex] = {\n        ...updatedData[periodIndex],\n        [fieldKey]: numericValue\n      };\n      return updatedData;\n    });\n  }, []);\n  const handleManualSubmit = async () => {\n    setAppError(null);\n    setCalculatedData([]);\n    const validationErrors = validateAllFields(manualInputData);\n    if (validationErrors.length > 0) {\n      let errorMsg = \"Erros de validação nos dados de entrada:\\n\";\n      validationErrors.forEach(pErr => {\n        errorMsg += `Período ${pErr.period}:\\n`;\n        Object.entries(pErr.fields).forEach(([fKey, errMsg]) => {\n          var _fieldDefinitions$fKe;\n          errorMsg += `- ${((_fieldDefinitions$fKe = fieldDefinitions[fKey]) === null || _fieldDefinitions$fKe === void 0 ? void 0 : _fieldDefinitions$fKe.label) || fKey}: ${errMsg}\\n`;\n        });\n      });\n      setAppError(new Error(errorMsg));\n      return;\n    }\n    try {\n      const result = await calculate(manualInputData, periodType);\n      setCalculatedData(result);\n    } catch (err) {\n      setAppError(err); // Error is already set by the hook, but can set a general one too\n    }\n  };\n  const handleTemplateDownload = async () => {\n    setAppError(null);\n    try {\n      const excel = await loadExcelJS(); // Ensures library is ready\n      if (!excel) {\n        setAppError(excelJsError || new Error(\"Falha ao carregar ExcelJS para download do template.\"));\n        return;\n      }\n      // Template generation logic (using excel instance)\n      const periodsForTemplate = inputMethod === 'manual' ? numberOfPeriods : DEFAULT_PERIODS_EXCEL;\n      const wb = new excel.Workbook();\n      const sheetName = `Dados Entrada (${periodsForTemplate} Períodos)`;\n      const ws = wb.addWorksheet(sheetName);\n      const headers = ['Item (Chave Interna)', 'Descrição (Português)'];\n      for (let i = 1; i <= periodsForTemplate; i++) {\n        headers.push(`Período ${i}`);\n      }\n      headers.push('Nota');\n      ws.addRow(headers);\n      ws.getRow(1).eachCell(cell => {\n        cell.font = {\n          bold: true\n        };\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: {\n            argb: BLUE_HEADER_FILL\n          }\n        };\n      });\n      getFieldKeys().forEach(fieldKey => {\n        const def = fieldDefinitions[fieldKey];\n        const rowValues = [fieldKey, def.label];\n        for (let i = 0; i < periodsForTemplate; i++) {\n          rowValues.push('');\n        }\n        rowValues.push(def.note || (def.firstPeriodOnly ? \"Apenas para o 1º período da série\" : ''));\n        const row = ws.addRow(rowValues);\n        for (let i = 0; i < periodsForTemplate; i++) {\n          const cell = row.getCell(3 + i);\n          if (def.firstPeriodOnly && i > 0) {\n            cell.value = \"[Não Aplicável]\";\n            cell.fill = {\n              type: 'pattern',\n              pattern: 'solid',\n              fgColor: {\n                argb: 'FFE0E0E0'\n              }\n            };\n            cell.font = {\n              italic: true,\n              color: {\n                argb: 'FF888888'\n              }\n            };\n          } else {\n            cell.fill = {\n              type: 'pattern',\n              pattern: 'solid',\n              fgColor: {\n                argb: GREY_RGB_FILL\n              }\n            };\n          }\n        }\n      });\n      const columnWidths = [{\n        width: 35\n      }, {\n        width: 55\n      }];\n      for (let i = 0; i < periodsForTemplate; i++) {\n        columnWidths.push({\n          width: 20\n        });\n      }\n      columnWidths.push({\n        width: 45\n      });\n      ws.columns = columnWidths;\n      const buf = await wb.xlsx.writeBuffer();\n      const blob = new Blob([buf], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `Template_Relatorio_${periodsForTemplate}_Periodos.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      a.remove();\n    } catch (err) {\n      setAppError(err);\n    }\n  };\n  const handleFileUpload = async file => {\n    setAppError(null);\n    setCalculatedData([]);\n    try {\n      const excel = await loadExcelJS(); // Ensures library is ready\n      if (!excel) {\n        setAppError(excelJsError || new Error(\"Falha ao carregar ExcelJS para upload.\"));\n        return;\n      }\n      const {\n        data: parsedInputData,\n        detectedPeriods\n      } = await parseFile(file, excel);\n      setNumberOfPeriods(detectedPeriods); // Update main numberOfPeriods based on Excel\n      setManualInputData(parsedInputData); // Set the raw input data parsed from Excel\n\n      const result = await calculate(parsedInputData, periodType); // Calculate metrics\n      setCalculatedData(result);\n    } catch (err) {\n      setAppError(err); // parseFile or calculate might throw\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-slate-50 text-slate-900 p-4 md:p-8 font-sans\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"text-center mb-10\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl md:text-4xl font-bold text-blue-700\",\n        children: \"Gerador de Relat\\xF3rio Diretoria Avan\\xE7ado \\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputMethodSelector, {\n      inputMethod: inputMethod,\n      onInputMethodChange: handleInputMethodChange,\n      companyName: companyName,\n      onCompanyNameChange: setCompanyName,\n      reportTitle: reportTitle,\n      onReportTitleChange: setReportTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), inputMethod === 'excel' && /*#__PURE__*/_jsxDEV(ExcelUploader, {\n      onTemplateDownload: handleTemplateDownload,\n      onFileUpload: handleFileUpload,\n      isLoading: isProcessing // Combined loading state\n      ,\n      error: appError // Display general app errors here\n      ,\n      numberOfPeriods: numberOfPeriods // Dynamic based on excel mode or detected from file\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this), inputMethod === 'manual' && /*#__PURE__*/_jsxDEV(ManualDataEntry, {\n      numberOfPeriods: numberOfPeriods,\n      onNumberOfPeriodsChange: setNumberOfPeriods,\n      periodType: periodType,\n      onPeriodTypeChange: setPeriodType,\n      inputData: manualInputData // Use manualInputData here\n      ,\n      onInputChange: handleManualInputChange,\n      onSubmit: handleManualSubmit,\n      isLoading: isCalculating // Specific to calculation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this), appError && !isCalculating && !isParsing &&\n    /*#__PURE__*/\n    // Show general errors if not related to ongoing calculation/parsing\n    _jsxDEV(\"div\", {\n      className: \"my-6 p-4 bg-red-100 border-l-4 border-red-500 text-red-700 rounded-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold\",\n        children: \"Ocorreu um Erro:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"whitespace-pre-wrap text-sm mt-1\",\n        children: appError.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center my-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-3 text-slate-600\",\n        children: \"Processando c\\xE1lculos financeiros...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), calculatedData.length > 0 && !isCalculating && /*#__PURE__*/_jsxDEV(ReportRenderer, {\n      calculatedData: calculatedData,\n      companyInfo: {\n        name: companyName,\n        reportTitle,\n        periodType,\n        numberOfPeriods: calculatedData.length\n      },\n      onLoadHtml2pdf: loadHtml2pdf // For PDF export button in ReportControls\n      ,\n      html2pdfError: html2pdfError\n      // Pass AI state and handlers down\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n_s(ReportGeneratorApp, \"+knrctYQksokTI+jqsobgRY9peE=\", false, function () {\n  return [useLibrary, useLibrary, useFinancialCalculator, useExcelParser];\n});\n_c = ReportGeneratorApp;\nvar _c;\n$RefreshReg$(_c, \"ReportGeneratorApp\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","InputMethodSelector","ManualDataEntry","ExcelUploader","ReportRenderer","useLibrary","useFinancialCalculator","useExcelParser","fieldDefinitions","getFieldKeys","validateAllFields","DEFAULT_PERIODS_MANUAL","DEFAULT_PERIODS_EXCEL","GREY_RGB_FILL","BLUE_HEADER_FILL","jsxDEV","_jsxDEV","ReportGeneratorApp","_s","inputMethod","setInputMethod","companyName","setCompanyName","reportTitle","setReportTitle","numberOfPeriods","setNumberOfPeriods","periodType","setPeriodType","manualInputData","setManualInputData","calculatedData","setCalculatedData","appError","setAppError","library","ExcelJS","loadLibrary","loadExcelJS","isLoading","isLoadingExcelJS","error","excelJsError","html2pdf","loadHtml2pdf","isLoadingHtml2pdf","html2pdfError","calculate","isCalculating","calculationError","parseFile","isParsing","parsingError","currentNumPeriods","fieldKeys","newInputData","Array","fill","map","_","periodIndex","existingPeriod","newPeriod","forEach","fieldKey","def","firstPeriodOnly","undefined","isProcessing","handleInputMethodChange","method","handleManualInputChange","value","prevData","updatedData","numericValue","Number","handleManualSubmit","validationErrors","length","errorMsg","pErr","period","Object","entries","fields","fKey","errMsg","_fieldDefinitions$fKe","label","Error","result","err","handleTemplateDownload","excel","periodsForTemplate","wb","Workbook","sheetName","ws","addWorksheet","headers","i","push","addRow","getRow","eachCell","cell","font","bold","type","pattern","fgColor","argb","rowValues","note","row","getCell","italic","color","columnWidths","width","columns","buf","xlsx","writeBuffer","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","remove","handleFileUpload","file","data","parsedInputData","detectedPeriods","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onInputMethodChange","onCompanyNameChange","onReportTitleChange","onTemplateDownload","onFileUpload","onNumberOfPeriodsChange","onPeriodTypeChange","inputData","onInputChange","onSubmit","message","companyInfo","name","onLoadHtml2pdf","_c","$RefreshReg$"],"sources":["/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/components/ReportGeneratorApp.jsx"],"sourcesContent":["// src/components/ReportGeneratorApp.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\n\n// Components\nimport InputMethodSelector from './InputPanel/InputMethodSelector';\nimport ManualDataEntry from './InputPanel/ManualDataEntry';\nimport ExcelUploader from './InputPanel/ExcelUploader';\nimport ReportRenderer from './ReportPanel/ReportRenderer'; // This will orchestrate report sections\n\n// Hooks\nimport { useLibrary } from '../hooks/useLibrary';\nimport { useFinancialCalculator } from '../hooks/useFinancialCalculator';\nimport { useExcelParser } from '../hooks/useExcelParser';\n\n// Utils\nimport { fieldDefinitions, getFieldKeys, validateAllFields } from '../utils/fieldDefinitions';\nimport { DEFAULT_PERIODS_MANUAL, DEFAULT_PERIODS_EXCEL, GREY_RGB_FILL, BLUE_HEADER_FILL } from '../utils/constants';\n\nexport default function ReportGeneratorApp() {\n  // UI State & Global App Info\n  const [inputMethod, setInputMethod] = useState('manual');\n  const [companyName, setCompanyName] = useState('Empresa Exemplo S.A.');\n  const [reportTitle, setReportTitle] = useState('Análise Financeira com Fluxo de Caixa');\n\n  // Data State\n  const [numberOfPeriods, setNumberOfPeriods] = useState(DEFAULT_PERIODS_MANUAL); // Controls manual entry form & template download periods\n  const [periodType, setPeriodType] = useState('anos');\n  const [manualInputData, setManualInputData] = useState([]); // For manual entry form\n  const [calculatedData, setCalculatedData] = useState([]); // Final processed data for report\n\n  // Error State\n  const [appError, setAppError] = useState(null); // General errors for display\n\n  // Hooks\n  const { library: ExcelJS, loadLibrary: loadExcelJS, isLoading: isLoadingExcelJS, error: excelJsError } = useLibrary('ExcelJS');\n  const { library: html2pdf, loadLibrary: loadHtml2pdf, isLoading: isLoadingHtml2pdf, error: html2pdfError } = useLibrary('html2pdf');\n  const { calculate, isCalculating, calculationError } = useFinancialCalculator();\n  const { parseFile, isParsing, parsingError } = useExcelParser();\n\n  // Initialize/reset manualInputData when numberOfPeriods or inputMethod changes\n  useEffect(() => {\n    if (inputMethod === 'manual') {\n      const currentNumPeriods = numberOfPeriods; // Use the state directly\n      const fieldKeys = getFieldKeys();\n      const newInputData = Array(currentNumPeriods).fill(null).map((_, periodIndex) => {\n        const existingPeriod = manualInputData[periodIndex] || {};\n        const newPeriod = {};\n        fieldKeys.forEach(fieldKey => {\n          const def = fieldDefinitions[fieldKey];\n          if (def.firstPeriodOnly && periodIndex > 0) {\n            newPeriod[fieldKey] = null;\n          } else {\n            newPeriod[fieldKey] = existingPeriod[fieldKey] === undefined ? null : existingPeriod[fieldKey];\n          }\n        });\n        return newPeriod;\n      });\n      setManualInputData(newInputData);\n    } else { // Excel mode\n      setNumberOfPeriods(DEFAULT_PERIODS_EXCEL); // Default to 2 for Excel mode context, template download reflects this\n      setManualInputData([]); // Clear manual data if switching to Excel\n    }\n  }, [numberOfPeriods, inputMethod]); // Removed manualInputData to avoid loop if not careful\n\n  // Combined loading state\n  const isProcessing = isLoadingExcelJS || isParsing || isCalculating;\n\n  // Clear errors when main inputs change\n  useEffect(() => {\n    setAppError(null);\n  }, [companyName, reportTitle, inputMethod]);\n\n  // Aggregate errors for display\n  useEffect(() => {\n    if (excelJsError) setAppError(excelJsError);\n    else if (html2pdfError) setAppError(html2pdfError);\n    else if (parsingError) setAppError(parsingError);\n    else if (calculationError) setAppError(calculationError);\n    else setAppError(null); // Clear if no hook errors\n  }, [excelJsError, html2pdfError, parsingError, calculationError]);\n\n  const handleInputMethodChange = useCallback((method) => {\n    setInputMethod(method);\n    setCalculatedData([]); // Clear results when switching method\n    setAppError(null);\n    if (method === 'manual') {\n      setNumberOfPeriods(DEFAULT_PERIODS_MANUAL); // Reset to default for manual\n    } else {\n      setNumberOfPeriods(DEFAULT_PERIODS_EXCEL); // Reset to default for excel\n      setManualInputData([]); // Clear manual input data\n    }\n  }, []);\n\n  const handleManualInputChange = useCallback((periodIndex, fieldKey, value) => {\n    setManualInputData(prevData => {\n      const updatedData = [...prevData];\n      const numericValue = value === '' ? null : Number(value);\n      updatedData[periodIndex] = {\n        ...updatedData[periodIndex],\n        [fieldKey]: numericValue\n      };\n      return updatedData;\n    });\n  }, []);\n\n  const handleManualSubmit = async () => {\n    setAppError(null);\n    setCalculatedData([]);\n\n    const validationErrors = validateAllFields(manualInputData);\n    if (validationErrors.length > 0) {\n      let errorMsg = \"Erros de validação nos dados de entrada:\\n\";\n      validationErrors.forEach(pErr => {\n        errorMsg += `Período ${pErr.period}:\\n`;\n        Object.entries(pErr.fields).forEach(([fKey, errMsg]) => {\n          errorMsg += `- ${fieldDefinitions[fKey]?.label || fKey}: ${errMsg}\\n`;\n        });\n      });\n      setAppError(new Error(errorMsg));\n      return;\n    }\n\n    try {\n      const result = await calculate(manualInputData, periodType);\n      setCalculatedData(result);\n    } catch (err) {\n      setAppError(err); // Error is already set by the hook, but can set a general one too\n    }\n\n  };\n\n  const handleTemplateDownload = async () => {\n    setAppError(null);\n    try {\n      const excel = await loadExcelJS(); // Ensures library is ready\n      if (!excel) {\n        setAppError(excelJsError || new Error(\"Falha ao carregar ExcelJS para download do template.\"));\n        return;\n      }\n      // Template generation logic (using excel instance)\n      const periodsForTemplate = inputMethod === 'manual' ? numberOfPeriods : DEFAULT_PERIODS_EXCEL;\n      const wb = new excel.Workbook();\n      const sheetName = `Dados Entrada (${periodsForTemplate} Períodos)`;\n      const ws = wb.addWorksheet(sheetName);\n\n      const headers = ['Item (Chave Interna)', 'Descrição (Português)'];\n      for (let i = 1; i <= periodsForTemplate; i++) {\n        headers.push(`Período ${i}`);\n      }\n      headers.push('Nota');\n      ws.addRow(headers);\n      ws.getRow(1).eachCell(cell => {\n        cell.font = { bold: true }; cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: BLUE_HEADER_FILL } };\n      });\n\n      getFieldKeys().forEach(fieldKey => {\n        const def = fieldDefinitions[fieldKey];\n        const rowValues = [fieldKey, def.label];\n        for (let i = 0; i < periodsForTemplate; i++) {\n          rowValues.push('');\n        }\n        rowValues.push(def.note || (def.firstPeriodOnly ? \"Apenas para o 1º período da série\" : ''));\n        const row = ws.addRow(rowValues);\n\n        for (let i = 0; i < periodsForTemplate; i++) {\n          const cell = row.getCell(3 + i); \n          if (def.firstPeriodOnly && i > 0) {\n            cell.value = \"[Não Aplicável]\"; \n            cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE0E0E0' } }; \n            cell.font = { italic: true, color: { argb: 'FF888888'} };\n          } else {\n            cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: GREY_RGB_FILL } };\n          }\n        }\n      });\n\n      const columnWidths = [{ width: 35 }, { width: 55 }];\n      for (let i = 0; i < periodsForTemplate; i++) { columnWidths.push({ width: 20 }); }\n      columnWidths.push({width: 45});\n      ws.columns = columnWidths;\n\n      const buf = await wb.xlsx.writeBuffer();\n      const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a'); a.href = url; a.download = `Template_Relatorio_${periodsForTemplate}_Periodos.xlsx`;\n      document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); a.remove();\n\n    } catch (err) {\n      setAppError(err);\n    }\n\n  };\n\n  const handleFileUpload = async (file) => {\n    setAppError(null);\n    setCalculatedData([]);\n    try {\n      const excel = await loadExcelJS(); // Ensures library is ready\n      if (!excel) {\n        setAppError(excelJsError || new Error(\"Falha ao carregar ExcelJS para upload.\"));\n        return;\n      }\n      const { data: parsedInputData, detectedPeriods } = await parseFile(file, excel);\n\n      setNumberOfPeriods(detectedPeriods); // Update main numberOfPeriods based on Excel\n      setManualInputData(parsedInputData); // Set the raw input data parsed from Excel\n\n      const result = await calculate(parsedInputData, periodType); // Calculate metrics\n      setCalculatedData(result);\n\n    } catch (err) {\n      setAppError(err); // parseFile or calculate might throw\n    }\n\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 text-slate-900 p-4 md:p-8 font-sans\">\n      <header className=\"text-center mb-10\">\n        <h1 className=\"text-3xl md:text-4xl font-bold text-blue-700\">\n          Gerador de Relatório Diretoria Avançado ✨\n        </h1>\n      </header>\n\n      <InputMethodSelector\n        inputMethod={inputMethod}\n        onInputMethodChange={handleInputMethodChange}\n        companyName={companyName}\n        onCompanyNameChange={setCompanyName}\n        reportTitle={reportTitle}\n        onReportTitleChange={setReportTitle}\n      />\n\n      {inputMethod === 'excel' && (\n        <ExcelUploader\n          onTemplateDownload={handleTemplateDownload}\n          onFileUpload={handleFileUpload}\n          isLoading={isProcessing} // Combined loading state\n          error={appError} // Display general app errors here\n          numberOfPeriods={numberOfPeriods} // Dynamic based on excel mode or detected from file\n        />\n      )}\n\n      {inputMethod === 'manual' && (\n        <ManualDataEntry\n          numberOfPeriods={numberOfPeriods}\n          onNumberOfPeriodsChange={setNumberOfPeriods}\n          periodType={periodType}\n          onPeriodTypeChange={setPeriodType}\n          inputData={manualInputData} // Use manualInputData here\n          onInputChange={handleManualInputChange}\n          onSubmit={handleManualSubmit}\n          isLoading={isCalculating} // Specific to calculation\n        />\n      )}\n\n      {/* General Error Display */}\n      {appError && !isCalculating && !isParsing && ( // Show general errors if not related to ongoing calculation/parsing\n        <div className=\"my-6 p-4 bg-red-100 border-l-4 border-red-500 text-red-700 rounded-md\">\n          <p className=\"font-bold\">Ocorreu um Erro:</p>\n          <pre className=\"whitespace-pre-wrap text-sm mt-1\">{appError.message}</pre>\n        </div>\n      )}\n\n      {/* Loading Indicator for Calculation */}\n      {isCalculating && (\n        <div className=\"text-center my-8\">\n          <div className=\"inline-block animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-600\"></div>\n          <p className=\"mt-3 text-slate-600\">Processando cálculos financeiros...</p>\n        </div>\n      )}\n\n      {/* Report Display */}\n      {calculatedData.length > 0 && !isCalculating && (\n        <ReportRenderer\n          calculatedData={calculatedData}\n          companyInfo={{ name: companyName, reportTitle, periodType, numberOfPeriods: calculatedData.length }}\n          onLoadHtml2pdf={loadHtml2pdf} // For PDF export button in ReportControls\n          html2pdfError={html2pdfError}\n          // Pass AI state and handlers down\n        />\n      )}\n    </div>\n\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}