{"ast":null,"code":"// src/utils/fieldDefinitions.js\nexport const fieldDefinitions = {\n  // P&L Inputs\n  'revenue': {\n    label: 'Receita (Revenue)',\n    type: 'currency',\n    group: 'P&L',\n    required: true,\n    // Make revenue required for meaningful calculations\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Receita não pode ser negativa.';\n      return null; // No error\n    }\n  },\n  'grossMarginPercentage': {\n    label: 'Margem Bruta %',\n    type: 'percentage',\n    group: 'P&L',\n    note: 'Ex: 40 para 40%',\n    validation: value => {\n      if (value !== null && (Number(value) < 0 || Number(value) > 100)) return 'Margem Bruta deve ser entre 0 e 100.';\n      return null;\n    }\n  },\n  'operatingExpenses': {\n    label: 'Despesas Operacionais Totais',\n    type: 'currency',\n    group: 'P&L',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Despesas Operacionais não podem ser negativas.';\n      return null;\n    }\n  },\n  'depreciationAndAmortisation': {\n    label: 'Depreciação e Amortização',\n    type: 'currency',\n    group: 'P&L',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'D&A não pode ser negativa.';\n      return null;\n    }\n  },\n  'netInterestExpenseIncome': {\n    label: 'Despesas/Receitas Financeiras (Líquido)',\n    type: 'currency',\n    group: 'P&L',\n    note: 'Negativo para despesa líquida'\n  },\n  'incomeTaxRatePercentage': {\n    label: 'Alíquota de Imposto de Renda %',\n    type: 'percentage',\n    group: 'P&L',\n    note: 'Ex: 25 para 25%',\n    validation: value => {\n      if (value !== null && (Number(value) < 0 || Number(value) > 100)) return 'Alíquota de IR deve ser entre 0 e 100.';\n      return null;\n    }\n  },\n  'dividendsPaid': {\n    label: 'Dividendos Pagos/Distribuições',\n    type: 'currency',\n    group: 'P&L',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Dividendos não podem ser negativos.';\n      return null;\n    }\n  },\n  'extraordinaryItems': {\n    label: '(Opcional) Itens Extraordinários (Líquido)',\n    type: 'currency',\n    group: 'P&L',\n    note: 'Negativo para despesa extraordinária'\n  },\n  'capitalExpenditures': {\n    label: 'Investimentos em Ativo Imobilizado (CAPEX)',\n    type: 'currency',\n    group: 'Cash Flow',\n    // Or Investing Activities\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'CAPEX não pode ser negativo.';\n      return null;\n    }\n  },\n  // Balance Sheet Inputs\n  'openingCash': {\n    label: 'Caixa (Saldo Inicial)',\n    type: 'currency',\n    group: 'Balance Sheet',\n    firstPeriodOnly: true,\n    note: 'Apenas para o 1º período da série',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Caixa inicial não pode ser negativo.';\n      return null;\n    }\n  },\n  'accountsReceivableValueAvg': {\n    label: 'Contas a Receber (Valor Médio do Período)',\n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Contas a Receber não pode ser negativo.';\n      return null;\n    }\n  },\n  'inventoryDays': {\n    // Kept as days, value will be derived based on COGS\n    label: 'Estoques - Prazo Médio (Dias)',\n    type: 'days',\n    group: 'Balance Sheet',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Dias de estoque não podem ser negativos.';\n      return null;\n    }\n  },\n  'netFixedAssets': {\n    label: 'Ativo Imobilizado Líquido (Saldo Final)',\n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Ativo Imobilizado não pode ser negativo.';\n      return null;\n    }\n  },\n  'accountsPayableValueAvg': {\n    label: 'Contas a Pagar (Valor Médio do Período)',\n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Contas a Pagar não pode ser negativo.';\n      return null;\n    }\n  },\n  'totalBankLoans': {\n    label: 'Empréstimos Bancários Totais (Saldo Final)',\n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: value => {\n      if (value !== null && Number(value) < 0) return 'Empréstimos não podem ser negativos.';\n      return null;\n    }\n  },\n  'initialEquity': {\n    label: 'Patrimônio Líquido (Saldo Inicial)',\n    type: 'currency',\n    group: 'Balance Sheet',\n    firstPeriodOnly: true,\n    note: 'Apenas para o 1º período da série'\n  }\n};\nexport const getFieldKeys = () => Object.keys(fieldDefinitions);\nexport const validateAllFields = periodsData => {\n  const allErrors = [];\n  periodsData.forEach((period, periodIndex) => {\n    const periodErrors = {\n      period: periodIndex + 1,\n      fields: {}\n    };\n    let hasErrorInPeriod = false;\n    getFieldKeys().forEach(fieldKey => {\n      const def = fieldDefinitions[fieldKey];\n      if (def.firstPeriodOnly && periodIndex > 0) {\n        return; // Skip validation for subsequent periods for these fields\n      }\n      if (def.validation) {\n        const errorMessage = def.validation(period[fieldKey]);\n        if (errorMessage) {\n          periodErrors.fields[fieldKey] = errorMessage;\n          hasErrorInPeriod = true;\n        }\n      }\n    });\n    if (hasErrorInPeriod) {\n      allErrors.push(periodErrors);\n    }\n  });\n  return allErrors;\n};","map":{"version":3,"names":["fieldDefinitions","label","type","group","required","validation","value","Number","note","firstPeriodOnly","getFieldKeys","Object","keys","validateAllFields","periodsData","allErrors","forEach","period","periodIndex","periodErrors","fields","hasErrorInPeriod","fieldKey","def","errorMessage","push"],"sources":["/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/utils/fieldDefinitions.js"],"sourcesContent":["// src/utils/fieldDefinitions.js\nexport const fieldDefinitions = {\n  // P&L Inputs\n  'revenue': { \n    label: 'Receita (Revenue)', \n    type: 'currency',\n    group: 'P&L',\n    required: true, // Make revenue required for meaningful calculations\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Receita não pode ser negativa.';\n      return null; // No error\n    }\n  },\n  'grossMarginPercentage': { \n    label: 'Margem Bruta %', \n    type: 'percentage',\n    group: 'P&L',\n    note: 'Ex: 40 para 40%',\n    validation: (value) => {\n      if (value !== null && (Number(value) < 0 || Number(value) > 100)) return 'Margem Bruta deve ser entre 0 e 100.';\n      return null;\n    }\n  },\n  'operatingExpenses': { \n    label: 'Despesas Operacionais Totais', \n    type: 'currency',\n    group: 'P&L',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Despesas Operacionais não podem ser negativas.';\n      return null;\n    }\n  },\n  'depreciationAndAmortisation': { \n    label: 'Depreciação e Amortização', \n    type: 'currency',\n    group: 'P&L',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'D&A não pode ser negativa.';\n      return null;\n    }\n  },\n  'netInterestExpenseIncome': { \n    label: 'Despesas/Receitas Financeiras (Líquido)', \n    type: 'currency', \n    group: 'P&L',\n    note: 'Negativo para despesa líquida'\n  },\n  'incomeTaxRatePercentage': { \n    label: 'Alíquota de Imposto de Renda %', \n    type: 'percentage',\n    group: 'P&L',\n    note: 'Ex: 25 para 25%',\n    validation: (value) => {\n      if (value !== null && (Number(value) < 0 || Number(value) > 100)) return 'Alíquota de IR deve ser entre 0 e 100.';\n      return null;\n    }\n  },\n  'dividendsPaid': { \n    label: 'Dividendos Pagos/Distribuições', \n    type: 'currency',\n    group: 'P&L',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Dividendos não podem ser negativos.';\n      return null;\n    }\n  },\n  'extraordinaryItems': { \n    label: '(Opcional) Itens Extraordinários (Líquido)', \n    type: 'currency', \n    group: 'P&L',\n    note: 'Negativo para despesa extraordinária'\n  },\n  'capitalExpenditures': { \n    label: 'Investimentos em Ativo Imobilizado (CAPEX)', \n    type: 'currency',\n    group: 'Cash Flow', // Or Investing Activities\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'CAPEX não pode ser negativo.';\n      return null;\n    }\n  },\n\n  // Balance Sheet Inputs\n  'openingCash': { \n    label: 'Caixa (Saldo Inicial)', \n    type: 'currency',\n    group: 'Balance Sheet',\n    firstPeriodOnly: true,\n    note: 'Apenas para o 1º período da série',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Caixa inicial não pode ser negativo.';\n      return null;\n    }\n  },\n  'accountsReceivableValueAvg': { \n    label: 'Contas a Receber (Valor Médio do Período)', \n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Contas a Receber não pode ser negativo.';\n      return null;\n    }\n  },\n  'inventoryDays': { // Kept as days, value will be derived based on COGS\n    label: 'Estoques - Prazo Médio (Dias)', \n    type: 'days',\n    group: 'Balance Sheet',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Dias de estoque não podem ser negativos.';\n      return null;\n    }\n  },\n  'netFixedAssets': { \n    label: 'Ativo Imobilizado Líquido (Saldo Final)', \n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Ativo Imobilizado não pode ser negativo.';\n      return null;\n    }\n  },\n  'accountsPayableValueAvg': { \n    label: 'Contas a Pagar (Valor Médio do Período)', \n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Contas a Pagar não pode ser negativo.';\n      return null;\n    }\n  },\n  'totalBankLoans': { \n    label: 'Empréstimos Bancários Totais (Saldo Final)', \n    type: 'currency',\n    group: 'Balance Sheet',\n    validation: (value) => {\n      if (value !== null && Number(value) < 0) return 'Empréstimos não podem ser negativos.';\n      return null;\n    }\n  },\n  'initialEquity': { \n    label: 'Patrimônio Líquido (Saldo Inicial)', \n    type: 'currency',\n    group: 'Balance Sheet',\n    firstPeriodOnly: true,\n    note: 'Apenas para o 1º período da série'\n  },\n};\n\nexport const getFieldKeys = () => Object.keys(fieldDefinitions);\n\nexport const validateAllFields = (periodsData) => {\n  const allErrors = [];\n  periodsData.forEach((period, periodIndex) => {\n    const periodErrors = { period: periodIndex + 1, fields: {} };\n    let hasErrorInPeriod = false;\n    getFieldKeys().forEach(fieldKey => {\n      const def = fieldDefinitions[fieldKey];\n      if (def.firstPeriodOnly && periodIndex > 0) {\n        return; // Skip validation for subsequent periods for these fields\n      }\n      if (def.validation) {\n        const errorMessage = def.validation(period[fieldKey]);\n        if (errorMessage) {\n          periodErrors.fields[fieldKey] = errorMessage;\n          hasErrorInPeriod = true;\n        }\n      }\n    });\n    if (hasErrorInPeriod) {\n      allErrors.push(periodErrors);\n    }\n  });\n  return allErrors;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}