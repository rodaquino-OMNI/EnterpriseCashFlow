{"ast":null,"code":"// src/workers/financialCalculator.worker.js\nimport { processFinancialData } from '../utils/calculations.js';\n// Note: Ensure your bundler (if used for workers) can handle this import path,\n// or you might need to inline processFinancialData or use a different import mechanism for workers.\n// For simple cases, you might even copy the processFinancialData function directly into this worker file.\n\nself.onmessage = function (event) {\n  const {\n    periodsInputDataRaw,\n    periodTypeLabel\n  } = event.data;\n  console.log(\"Worker received data:\", {\n    periodsInputDataRaw,\n    periodTypeLabel\n  });\n  try {\n    // Assuming processFinancialData is available in this scope\n    // If not, and you can't use modules directly in your worker setup,\n    // you might need to make processFinancialData a global function or pass its source.\n    const calculatedData = processFinancialData(periodsInputDataRaw, periodTypeLabel);\n    self.postMessage({\n      success: true,\n      data: calculatedData,\n      timestamp: Date.now()\n    });\n  } catch (error) {\n    console.error(\"Error in financialCalculator.worker.js:\", error);\n    self.postMessage({\n      success: false,\n      error: error.message,\n      stack: error.stack,\n      // Send stack for better debugging\n      timestamp: Date.now()\n    });\n  }\n};","map":{"version":3,"names":["processFinancialData","self","onmessage","event","periodsInputDataRaw","periodTypeLabel","data","console","log","calculatedData","postMessage","success","timestamp","Date","now","error","message","stack"],"sources":["/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/workers/financialCalculator.worker.js"],"sourcesContent":["// src/workers/financialCalculator.worker.js\nimport { processFinancialData } from '../utils/calculations.js'; \n// Note: Ensure your bundler (if used for workers) can handle this import path,\n// or you might need to inline processFinancialData or use a different import mechanism for workers.\n// For simple cases, you might even copy the processFinancialData function directly into this worker file.\n\nself.onmessage = function(event) {\n  const { periodsInputDataRaw, periodTypeLabel } = event.data;\n\n  console.log(\"Worker received data:\", { periodsInputDataRaw, periodTypeLabel });\n\n  try {\n    // Assuming processFinancialData is available in this scope\n    // If not, and you can't use modules directly in your worker setup,\n    // you might need to make processFinancialData a global function or pass its source.\n    const calculatedData = processFinancialData(periodsInputDataRaw, periodTypeLabel);\n\n    self.postMessage({\n      success: true,\n      data: calculatedData,\n      timestamp: Date.now()\n    });\n\n  } catch (error) {\n    console.error(\"Error in financialCalculator.worker.js:\", error);\n    self.postMessage({\n      success: false,\n      error: error.message,\n      stack: error.stack, // Send stack for better debugging\n      timestamp: Date.now()\n    });\n  }\n};"],"mappings":"AAAA;AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D;AACA;AACA;;AAEAC,IAAI,CAACC,SAAS,GAAG,UAASC,KAAK,EAAE;EAC/B,MAAM;IAAEC,mBAAmB;IAAEC;EAAgB,CAAC,GAAGF,KAAK,CAACG,IAAI;EAE3DC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;IAAEJ,mBAAmB;IAAEC;EAAgB,CAAC,CAAC;EAE9E,IAAI;IACF;IACA;IACA;IACA,MAAMI,cAAc,GAAGT,oBAAoB,CAACI,mBAAmB,EAAEC,eAAe,CAAC;IAEjFJ,IAAI,CAACS,WAAW,CAAC;MACfC,OAAO,EAAE,IAAI;MACbL,IAAI,EAAEG,cAAc;MACpBG,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/Dd,IAAI,CAACS,WAAW,CAAC;MACfC,OAAO,EAAE,KAAK;MACdI,KAAK,EAAEA,KAAK,CAACC,OAAO;MACpBC,KAAK,EAAEF,KAAK,CAACE,KAAK;MAAE;MACpBL,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}