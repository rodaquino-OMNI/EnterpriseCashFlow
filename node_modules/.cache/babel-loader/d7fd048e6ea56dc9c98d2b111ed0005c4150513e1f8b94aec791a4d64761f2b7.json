{"ast":null,"code":"// src/utils/formatters.js\nexport const formatCurrency = (value, withSymbol = true) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) {\n    return 'N/A';\n  }\n  const val = Number(value);\n  const symbol = withSymbol ? 'R$ ' : '';\n  return symbol + val.toLocaleString('pt-BR', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n};\nexport const formatPercentage = (value, multiplyBy100 = false) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) {\n    return 'N/A';\n  }\n  const valToFormat = multiplyBy100 ? Number(value) * 100 : Number(value);\n  return valToFormat.toLocaleString('pt-BR', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }) + '%';\n};\nexport const formatDays = value => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) {\n    return 'N/A';\n  }\n  const val = Math.round(Number(value)); // Typically days are whole numbers or rounded\n  return val.toLocaleString('pt-BR', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }) + ' dias';\n};\nexport const getMovementClass = value => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value)) || Number(value) === 0) {\n    return 'text-slate-500';\n  }\n  return Number(value) > 0 ? 'text-green-600' : 'text-red-600';\n};\nexport const getMovementIndicator = value => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value)) || Number(value) === 0) {\n    return '';\n  }\n  return Number(value) > 0 ? '▲' : '▼';\n};\nexport const formatMovement = (value, movementType = 'value', isPercentContext = false) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) return 'N/A';\n  if (movementType === 'percentage_points' || isPercentContext) {\n    // If value is already a difference of percentages (e.g., 5% - 3% = 2%), format as p.p.\n    return Number(value).toLocaleString('pt-BR', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }) + ' p.p.';\n  }\n  if (movementType === 'days') {\n    return formatDays(value).replace(' dias', ''); // Just the number for \"X dias\" context\n  }\n  if (movementType === 'percentage_change') {\n    return formatPercentage(value); // This is a % change, e.g., revenue grew by X%\n  }\n  // Default to currency (absolute value change)\n  return formatCurrency(value, false);\n};","map":{"version":3,"names":["formatCurrency","value","withSymbol","isNaN","Number","val","symbol","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatPercentage","multiplyBy100","valToFormat","formatDays","Math","round","getMovementClass","getMovementIndicator","formatMovement","movementType","isPercentContext","replace"],"sources":["/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/utils/formatters.js"],"sourcesContent":["// src/utils/formatters.js\nexport const formatCurrency = (value, withSymbol = true) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) {\n    return 'N/A';\n  }\n  const val = Number(value);\n  const symbol = withSymbol ? 'R$ ' : '';\n  return symbol + val.toLocaleString('pt-BR', { \n    minimumFractionDigits: 2, \n    maximumFractionDigits: 2 \n  });\n};\n\nexport const formatPercentage = (value, multiplyBy100 = false) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) {\n    return 'N/A';\n  }\n  const valToFormat = multiplyBy100 ? Number(value) * 100 : Number(value);\n  return valToFormat.toLocaleString('pt-BR', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }) + '%';\n};\n\nexport const formatDays = (value) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) {\n    return 'N/A';\n  }\n  const val = Math.round(Number(value)); // Typically days are whole numbers or rounded\n  return val.toLocaleString('pt-BR', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }) + ' dias';\n};\n\nexport const getMovementClass = (value) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value)) || Number(value) === 0) {\n    return 'text-slate-500';\n  }\n  return Number(value) > 0 ? 'text-green-600' : 'text-red-600';\n};\n\nexport const getMovementIndicator = (value) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value)) || Number(value) === 0) {\n    return '';\n  }\n  return Number(value) > 0 ? '▲' : '▼';\n};\n\nexport const formatMovement = (value, movementType = 'value', isPercentContext = false) => {\n  if (value === null || typeof value === 'undefined' || isNaN(Number(value))) return 'N/A';\n\n  if (movementType === 'percentage_points' || isPercentContext) {\n    // If value is already a difference of percentages (e.g., 5% - 3% = 2%), format as p.p.\n    return Number(value).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' p.p.';\n  }\n  if (movementType === 'days') {\n    return formatDays(value).replace(' dias', ''); // Just the number for \"X dias\" context\n  }\n  if (movementType === 'percentage_change') {\n    return formatPercentage(value); // This is a % change, e.g., revenue grew by X%\n  }\n  // Default to currency (absolute value change)\n  return formatCurrency(value, false);\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,KAAK,EAAEC,UAAU,GAAG,IAAI,KAAK;EAC1D,IAAID,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,EAAE;IAC1E,OAAO,KAAK;EACd;EACA,MAAMI,GAAG,GAAGD,MAAM,CAACH,KAAK,CAAC;EACzB,MAAMK,MAAM,GAAGJ,UAAU,GAAG,KAAK,GAAG,EAAE;EACtC,OAAOI,MAAM,GAAGD,GAAG,CAACE,cAAc,CAAC,OAAO,EAAE;IAC1CC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACT,KAAK,EAAEU,aAAa,GAAG,KAAK,KAAK;EAChE,IAAIV,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,EAAE;IAC1E,OAAO,KAAK;EACd;EACA,MAAMW,WAAW,GAAGD,aAAa,GAAGP,MAAM,CAACH,KAAK,CAAC,GAAG,GAAG,GAAGG,MAAM,CAACH,KAAK,CAAC;EACvE,OAAOW,WAAW,CAACL,cAAc,CAAC,OAAO,EAAE;IACzCC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,GAAG,GAAG;AACV,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIZ,KAAK,IAAK;EACnC,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,EAAE;IAC1E,OAAO,KAAK;EACd;EACA,MAAMI,GAAG,GAAGS,IAAI,CAACC,KAAK,CAACX,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EACvC,OAAOI,GAAG,CAACE,cAAc,CAAC,OAAO,EAAE;IACjCC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,GAAG,OAAO;AACd,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAIf,KAAK,IAAK;EACzC,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,IAAIG,MAAM,CAACH,KAAK,CAAC,KAAK,CAAC,EAAE;IACjG,OAAO,gBAAgB;EACzB;EACA,OAAOG,MAAM,CAACH,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB,GAAG,cAAc;AAC9D,CAAC;AAED,OAAO,MAAMgB,oBAAoB,GAAIhB,KAAK,IAAK;EAC7C,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,IAAIG,MAAM,CAACH,KAAK,CAAC,KAAK,CAAC,EAAE;IACjG,OAAO,EAAE;EACX;EACA,OAAOG,MAAM,CAACH,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;AACtC,CAAC;AAED,OAAO,MAAMiB,cAAc,GAAGA,CAACjB,KAAK,EAAEkB,YAAY,GAAG,OAAO,EAAEC,gBAAgB,GAAG,KAAK,KAAK;EACzF,IAAInB,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;EAExF,IAAIkB,YAAY,KAAK,mBAAmB,IAAIC,gBAAgB,EAAE;IAC5D;IACA,OAAOhB,MAAM,CAACH,KAAK,CAAC,CAACM,cAAc,CAAC,OAAO,EAAE;MAAEC,qBAAqB,EAAE,CAAC;MAAEC,qBAAqB,EAAE;IAAE,CAAC,CAAC,GAAG,OAAO;EAChH;EACA,IAAIU,YAAY,KAAK,MAAM,EAAE;IAC3B,OAAON,UAAU,CAACZ,KAAK,CAAC,CAACoB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;EACjD;EACA,IAAIF,YAAY,KAAK,mBAAmB,EAAE;IACxC,OAAOT,gBAAgB,CAACT,KAAK,CAAC,CAAC,CAAC;EAClC;EACA;EACA,OAAOD,cAAc,CAACC,KAAK,EAAE,KAAK,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}