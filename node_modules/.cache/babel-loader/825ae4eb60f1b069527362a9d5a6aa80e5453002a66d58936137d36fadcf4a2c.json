{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useGeminiApi.js\nimport { useState, useCallback } from 'react';\nimport { GENAI_API_KEY_PLACEHOLDER } from '../utils/constants';\nexport function useGeminiApi() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Allow API Key to be passed or use a placeholder/env variable\n  const callApi = useCallback(async (prompt, apiKey = GENAI_API_KEY_PLACEHOLDER) => {\n    if (!apiKey || apiKey === GENAI_API_KEY_PLACEHOLDER) {\n      const err = new Error('API key para Gemini não configurada.');\n      console.error(err.message);\n      setError(err);\n      // You might want to return a specific message or throw,\n      // instead of letting the fetch fail later.\n      // For now, we'll display this error to the user.\n      // Returning a string here that indicates the error.\n      return \"Erro: API Key não configurada. Verifique as configurações da aplicação.\";\n    }\n    setIsLoading(true);\n    setError(null);\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            role: \"user\",\n            parts: [{\n              text: prompt\n            }]\n          }]\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json().catch(() => ({\n          error: {\n            message: response.statusText\n          }\n        })); // Try to parse JSON, fallback to statusText\n        const errorMessage = ((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || `Erro HTTP ${response.status}`;\n        throw new Error(`API Gemini (${response.status}): ${errorMessage}`);\n      }\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0 && typeof result.candidates[0].content.parts[0].text === 'string') {\n        const text = result.candidates[0].content.parts[0].text;\n        setIsLoading(false);\n        return text;\n      } else if (result.candidates && result.candidates.length > 0 && result.candidates[0].finishReason) {\n        // Handle cases where generation might be blocked or finish for other reasons\n        const reason = result.candidates[0].finishReason;\n        const safetyRatings = result.candidates[0].safetyRatings;\n        let message = `Geração de conteúdo pela IA finalizada com motivo: ${reason}.`;\n        if (safetyRatings) {\n          message += `Classificações de segurança: ${JSON.stringify(safetyRatings)}`;\n        }\n        console.warn(message);\n        throw new Error(message);\n      } else {\n        console.warn(\"Resposta da API Gemini em formato inesperado:\", result);\n        throw new Error(\"Resposta da API Gemini em formato inesperado ou sem conteúdo de texto.\");\n      }\n    } catch (err) {\n      console.error('Erro na chamada da API Gemini:', err);\n      setError(err);\n      setIsLoading(false);\n      // Return the error message to be displayed, or rethrow if the component handles it\n      return `Erro ao comunicar com a IA: ${err.message}`;\n    }\n  }, []);\n  const resetError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    callApi,\n    isLoading,\n    error,\n    resetError\n  };\n}\n_s(useGeminiApi, \"KuqNzAuZkgMMimtypvPzkNSw2U8=\");","map":{"version":3,"names":["useState","useCallback","GENAI_API_KEY_PLACEHOLDER","useGeminiApi","_s","isLoading","setIsLoading","error","setError","callApi","prompt","apiKey","err","Error","console","message","apiUrl","response","fetch","method","headers","body","JSON","stringify","contents","role","parts","text","ok","_errorData$error","errorData","json","catch","statusText","errorMessage","status","result","candidates","length","content","finishReason","reason","safetyRatings","warn","resetError"],"sources":["/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/hooks/useGeminiApi.js"],"sourcesContent":["// src/hooks/useGeminiApi.js\nimport { useState, useCallback } from 'react';\nimport { GENAI_API_KEY_PLACEHOLDER } from '../utils/constants';\n\nexport function useGeminiApi() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Allow API Key to be passed or use a placeholder/env variable\n  const callApi = useCallback(async (prompt, apiKey = GENAI_API_KEY_PLACEHOLDER) => {\n    if (!apiKey || apiKey === GENAI_API_KEY_PLACEHOLDER) {\n      const err = new Error('API key para Gemini não configurada.');\n      console.error(err.message);\n      setError(err);\n      // You might want to return a specific message or throw,\n      // instead of letting the fetch fail later.\n      // For now, we'll display this error to the user.\n      // Returning a string here that indicates the error.\n      return \"Erro: API Key não configurada. Verifique as configurações da aplicação.\";\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          contents: [{\n            role: \"user\",\n            parts: [{ text: prompt }]\n          }]\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: { message: response.statusText } })); // Try to parse JSON, fallback to statusText\n        const errorMessage = errorData.error?.message || `Erro HTTP ${response.status}`;\n        throw new Error(`API Gemini (${response.status}): ${errorMessage}`);\n      }\n\n      const result = await response.json();\n\n      if (result.candidates && result.candidates.length > 0 &&\n          result.candidates[0].content && result.candidates[0].content.parts &&\n          result.candidates[0].content.parts.length > 0 &&\n          typeof result.candidates[0].content.parts[0].text === 'string') {\n        const text = result.candidates[0].content.parts[0].text;\n        setIsLoading(false);\n        return text;\n      } else if (result.candidates && result.candidates.length > 0 && result.candidates[0].finishReason) {\n        // Handle cases where generation might be blocked or finish for other reasons\n        const reason = result.candidates[0].finishReason;\n        const safetyRatings = result.candidates[0].safetyRatings;\n        let message = `Geração de conteúdo pela IA finalizada com motivo: ${reason}.`;\n        if (safetyRatings) {\n          message += `Classificações de segurança: ${JSON.stringify(safetyRatings)}`;\n        }\n        console.warn(message);\n        throw new Error(message);\n      }\n      else {\n        console.warn(\"Resposta da API Gemini em formato inesperado:\", result);\n        throw new Error(\"Resposta da API Gemini em formato inesperado ou sem conteúdo de texto.\");\n      }\n    } catch (err) {\n      console.error('Erro na chamada da API Gemini:', err);\n      setError(err);\n      setIsLoading(false);\n      // Return the error message to be displayed, or rethrow if the component handles it\n      return `Erro ao comunicar com a IA: ${err.message}`;\n    }\n\n  }, []);\n\n  const resetError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    callApi,\n    isLoading,\n    error,\n    resetError\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}