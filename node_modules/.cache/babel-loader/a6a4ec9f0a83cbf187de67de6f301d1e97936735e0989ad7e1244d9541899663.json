{"ast":null,"code":"// src/utils/calculations.js\nimport { PERIOD_TYPES } from './constants';\n\n// This function will be called by the Web Worker.\n// It takes the raw input for all periods and the periodType.\nexport function processFinancialData(periodsInputDataRaw, periodTypeLabel) {\n  var _PERIOD_TYPES$periodT;\n  if (!periodsInputDataRaw || periodsInputDataRaw.length === 0) {\n    return [];\n  }\n  let previousPeriodCalculated = null;\n  const daysInPeriod = ((_PERIOD_TYPES$periodT = PERIOD_TYPES[periodTypeLabel]) === null || _PERIOD_TYPES$periodT === void 0 ? void 0 : _PERIOD_TYPES$periodT.days) || 365;\n  const calculatedDataAllPeriods = periodsInputDataRaw.map((periodInput, periodIndex) => {\n    var _previousPeriodCalcul;\n    // --- P&L Reconstruction ---\n    const revenue = periodInput.revenue || 0;\n    const grossMarginPercentage = (periodInput.grossMarginPercentage || 0) / 100;\n    const operatingExpenses = periodInput.operatingExpenses || 0;\n    const depreciationAndAmortisation = periodInput.depreciationAndAmortisation || 0;\n    const netInterestExpenseIncome = periodInput.netInterestExpenseIncome || 0;\n    const incomeTaxRatePercentage = (periodInput.incomeTaxRatePercentage || 0) / 100;\n    const dividendsPaid = periodInput.dividendsPaid || 0;\n    const extraordinaryItems = periodInput.extraordinaryItems || 0;\n    const capitalExpenditures = periodInput.capitalExpenditures || 0;\n    const cogs = revenue * (1 - grossMarginPercentage);\n    const grossProfit = revenue - cogs;\n    const ebitda = grossProfit - operatingExpenses;\n    const ebit = ebitda - depreciationAndAmortisation; // Operating Profit\n    const pbt = ebit + netInterestExpenseIncome + extraordinaryItems;\n    const incomeTax = pbt > 0 ? pbt * incomeTaxRatePercentage : 0;\n    const netProfit = pbt - incomeTax;\n    const retainedProfit = netProfit - dividendsPaid;\n\n    // --- Balance Sheet & WC Inputs/Derivations ---\n    const accountsReceivableValueAvg = periodInput.accountsReceivableValueAvg || 0;\n    const inventoryValueAvg = periodInput.inventoryValueAvg || 0; // Updated to use inventoryValueAvg as input\n    const accountsPayableValueAvg = periodInput.accountsPayableValueAvg || 0;\n    const netFixedAssets = periodInput.netFixedAssets || 0;\n    const totalBankLoans = periodInput.totalBankLoans || 0;\n\n    // Derive Days from Average Values\n    const arDaysDerived = revenue > 0 ? accountsReceivableValueAvg / revenue * daysInPeriod : 0;\n    const inventoryDaysDerived = cogs > 0 ? inventoryValueAvg / cogs * daysInPeriod : 0; // Updated to calculate inventoryDaysDerived\n    const apDaysDerived = cogs > 0 ? accountsPayableValueAvg / cogs * daysInPeriod : 0;\n    const workingCapitalValue = accountsReceivableValueAvg + inventoryValueAvg - accountsPayableValueAvg;\n    const wcDays = arDaysDerived + inventoryDaysDerived - apDaysDerived;\n\n    // --- Cash Flow Analysis ---\n    const openingCashForPeriod = periodIndex === 0 ? periodInput.openingCash || 0 : ((_previousPeriodCalcul = previousPeriodCalculated) === null || _previousPeriodCalcul === void 0 ? void 0 : _previousPeriodCalcul.closingCash) || 0;\n    const operatingCashFlow = netProfit + depreciationAndAmortisation;\n    const workingCapitalChange = previousPeriodCalculated ? workingCapitalValue - previousPeriodCalculated.workingCapitalValue : workingCapitalValue - 0; // Assume initial WC was 0 or this period's value if no prev.\n    // For a true \"change\", the first period's change is often vs an implied prior state or is 0.\n    // For simplicity here, first period change is its own WC level from zero.\n    // A more accurate first period WC change would require opening BS WC items.\n\n    const cashFromOpsAfterWC = operatingCashFlow - workingCapitalChange; // Investment in WC reduces cash\n    const netCashFlowBeforeFinancing = cashFromOpsAfterWC - capitalExpenditures;\n    const changeInDebt = previousPeriodCalculated ? totalBankLoans - previousPeriodCalculated.totalBankLoans : totalBankLoans - 0; // Assume initial debt was 0 if no prev period or specific opening debt input.\n    const cashFlowFromFinancing = changeInDebt - dividendsPaid;\n    const netChangeInCash = netCashFlowBeforeFinancing + cashFlowFromFinancing;\n    const closingCash = openingCashForPeriod + netChangeInCash;\n\n    // --- Balance Sheet Reconstruction (using derived closingCash) ---\n    const estimatedCurrentAssets = closingCash + accountsReceivableValueAvg + inventoryValueAvg; // Updated to use inventoryValueAvg\n    const estimatedTotalAssets = estimatedCurrentAssets + netFixedAssets;\n    let currentPeriodEquity;\n    if (periodIndex === 0) {\n      currentPeriodEquity = (periodInput.initialEquity || 0) + retainedProfit;\n    } else {\n      var _previousPeriodCalcul2;\n      currentPeriodEquity = (((_previousPeriodCalcul2 = previousPeriodCalculated) === null || _previousPeriodCalcul2 === void 0 ? void 0 : _previousPeriodCalcul2.equity) || 0) + retainedProfit;\n    }\n\n    // Simplified liabilities for balance difference calculation\n    const estimatedCurrentLiabilities = accountsPayableValueAvg; // Highly simplified, missing current portion of debt, other accruals\n    const estimatedNonCurrentLiabilities = totalBankLoans; // Assuming all loans are non-current for simplicity here.\n    const estimatedTotalLiabilities = estimatedCurrentLiabilities + estimatedNonCurrentLiabilities;\n    const balanceSheetDifference = estimatedTotalAssets - (estimatedTotalLiabilities + currentPeriodEquity);\n\n    // --- Enhanced Working Capital Analysis ---\n    const arPer100Revenue = revenue ? accountsReceivableValueAvg / revenue * 100 : 0;\n    const inventoryPer100Revenue = revenue ? inventoryValueAvg / revenue * 100 : 0; // Updated to use inventoryValueAvg\n    const apPer100Revenue = revenue ? accountsPayableValueAvg / cogs * 100 : 0; // AP usually vs COGS for consistency with AP days\n    const wcPer100Revenue = revenue ? workingCapitalValue / revenue * 100 : 0;\n    const fundingGapOrSurplus = -netCashFlowBeforeFinancing; // Positive = Gap (needs funding)\n\n    const currentPeriodResult = {\n      // Original Inputs (useful for display & AI context)\n      ...periodInput,\n      // P&L Calculated\n      revenue,\n      cogs,\n      grossProfit,\n      gmPct: grossMarginPercentage * 100,\n      operatingExpenses,\n      ebitda,\n      depreciationAndAmortisation,\n      ebit,\n      opProfitPct: revenue ? ebit / revenue * 100 : 0,\n      netInterestExpenseIncome,\n      extraordinaryItems,\n      pbt,\n      incomeTaxRatePercentageActual: incomeTaxRatePercentage,\n      incomeTax,\n      netProfit,\n      netProfitPct: revenue ? netProfit / revenue * 100 : 0,\n      dividendsPaid,\n      retainedProfit,\n      capitalExpenditures,\n      // Balance Sheet & WC Calculated/Derived\n      openingCash: openingCashForPeriod,\n      closingCash,\n      accountsReceivableValueAvg,\n      // Inputted Avg value\n      arDaysDerived,\n      // Derived AR Days\n      inventoryValueAvg,\n      // Updated to use inventoryValueAvg\n      inventoryDaysDerived,\n      // Updated to calculate inventoryDaysDerived\n      accountsPayableValueAvg,\n      // Inputted Avg value\n      apDaysDerived,\n      // Derived AP Days\n      wcDays,\n      // Derived WC Days\n\n      estimatedCurrentAssets,\n      netFixedAssets,\n      estimatedTotalAssets,\n      totalBankLoans,\n      // Input (ending balance)\n      estimatedCurrentLiabilities,\n      // Simplified\n      estimatedNonCurrentLiabilities,\n      // Simplified\n      estimatedTotalLiabilities,\n      // Simplified\n      equity: currentPeriodEquity,\n      balanceSheetDifference,\n      // Working Capital Analysis\n      workingCapitalValue,\n      workingCapitalChange,\n      arPer100Revenue,\n      inventoryPer100Revenue,\n      apPer100Revenue,\n      wcPer100Revenue,\n      // Cash Flow Analysis\n      operatingCashFlow,\n      cashFromOpsAfterWC,\n      netCashFlowBeforeFinancing,\n      changeInDebt,\n      cashFlowFromFinancing,\n      netChangeInCash,\n      fundingGapOrSurplus\n    };\n    previousPeriodCalculated = currentPeriodResult;\n    return currentPeriodResult;\n  });\n  return calculatedDataAllPeriods;\n}","map":{"version":3,"names":["PERIOD_TYPES","processFinancialData","periodsInputDataRaw","periodTypeLabel","_PERIOD_TYPES$periodT","length","previousPeriodCalculated","daysInPeriod","days","calculatedDataAllPeriods","map","periodInput","periodIndex","_previousPeriodCalcul","revenue","grossMarginPercentage","operatingExpenses","depreciationAndAmortisation","netInterestExpenseIncome","incomeTaxRatePercentage","dividendsPaid","extraordinaryItems","capitalExpenditures","cogs","grossProfit","ebitda","ebit","pbt","incomeTax","netProfit","retainedProfit","accountsReceivableValueAvg","inventoryValueAvg","accountsPayableValueAvg","netFixedAssets","totalBankLoans","arDaysDerived","inventoryDaysDerived","apDaysDerived","workingCapitalValue","wcDays","openingCashForPeriod","openingCash","closingCash","operatingCashFlow","workingCapitalChange","cashFromOpsAfterWC","netCashFlowBeforeFinancing","changeInDebt","cashFlowFromFinancing","netChangeInCash","estimatedCurrentAssets","estimatedTotalAssets","currentPeriodEquity","initialEquity","_previousPeriodCalcul2","equity","estimatedCurrentLiabilities","estimatedNonCurrentLiabilities","estimatedTotalLiabilities","balanceSheetDifference","arPer100Revenue","inventoryPer100Revenue","apPer100Revenue","wcPer100Revenue","fundingGapOrSurplus","currentPeriodResult","gmPct","opProfitPct","incomeTaxRatePercentageActual","netProfitPct"],"sources":["/Users/rodrigo/Git Repositories/EnterpriseCashFlow/src/utils/calculations.js"],"sourcesContent":["// src/utils/calculations.js\nimport { PERIOD_TYPES } from './constants';\n\n// This function will be called by the Web Worker.\n// It takes the raw input for all periods and the periodType.\nexport function processFinancialData(periodsInputDataRaw, periodTypeLabel) {\n  if (!periodsInputDataRaw || periodsInputDataRaw.length === 0) {\n    return [];\n  }\n\n  let previousPeriodCalculated = null;\n  const daysInPeriod = PERIOD_TYPES[periodTypeLabel]?.days || 365;\n\n  const calculatedDataAllPeriods = periodsInputDataRaw.map((periodInput, periodIndex) => {\n    // --- P&L Reconstruction ---\n    const revenue = periodInput.revenue || 0;\n    const grossMarginPercentage = (periodInput.grossMarginPercentage || 0) / 100;\n    const operatingExpenses = periodInput.operatingExpenses || 0;\n    const depreciationAndAmortisation = periodInput.depreciationAndAmortisation || 0;\n    const netInterestExpenseIncome = periodInput.netInterestExpenseIncome || 0;\n    const incomeTaxRatePercentage = (periodInput.incomeTaxRatePercentage || 0) / 100;\n    const dividendsPaid = periodInput.dividendsPaid || 0;\n    const extraordinaryItems = periodInput.extraordinaryItems || 0;\n    const capitalExpenditures = periodInput.capitalExpenditures || 0;\n\n    const cogs = revenue * (1 - grossMarginPercentage);\n    const grossProfit = revenue - cogs;\n    const ebitda = grossProfit - operatingExpenses;\n    const ebit = ebitda - depreciationAndAmortisation; // Operating Profit\n    const pbt = ebit + netInterestExpenseIncome + extraordinaryItems;\n    const incomeTax = pbt > 0 ? pbt * incomeTaxRatePercentage : 0;\n    const netProfit = pbt - incomeTax;\n    const retainedProfit = netProfit - dividendsPaid;\n\n    // --- Balance Sheet & WC Inputs/Derivations ---\n    const accountsReceivableValueAvg = periodInput.accountsReceivableValueAvg || 0;\n    const inventoryValueAvg = periodInput.inventoryValueAvg || 0; // Updated to use inventoryValueAvg as input\n    const accountsPayableValueAvg = periodInput.accountsPayableValueAvg || 0;\n    const netFixedAssets = periodInput.netFixedAssets || 0;\n    const totalBankLoans = periodInput.totalBankLoans || 0;\n\n    // Derive Days from Average Values\n    const arDaysDerived = revenue > 0 ? (accountsReceivableValueAvg / revenue) * daysInPeriod : 0;\n    const inventoryDaysDerived = cogs > 0 ? (inventoryValueAvg / cogs) * daysInPeriod : 0; // Updated to calculate inventoryDaysDerived\n    const apDaysDerived = cogs > 0 ? (accountsPayableValueAvg / cogs) * daysInPeriod : 0;\n\n    const workingCapitalValue = accountsReceivableValueAvg + inventoryValueAvg - accountsPayableValueAvg;\n    const wcDays = arDaysDerived + inventoryDaysDerived - apDaysDerived;\n\n    // --- Cash Flow Analysis ---\n    const openingCashForPeriod = periodIndex === 0\n      ? (periodInput.openingCash || 0)\n      : (previousPeriodCalculated?.closingCash || 0);\n\n    const operatingCashFlow = netProfit + depreciationAndAmortisation;\n    const workingCapitalChange = previousPeriodCalculated\n      ? workingCapitalValue - previousPeriodCalculated.workingCapitalValue\n      : workingCapitalValue - 0; // Assume initial WC was 0 or this period's value if no prev.\n    // For a true \"change\", the first period's change is often vs an implied prior state or is 0.\n    // For simplicity here, first period change is its own WC level from zero.\n    // A more accurate first period WC change would require opening BS WC items.\n\n    const cashFromOpsAfterWC = operatingCashFlow - workingCapitalChange; // Investment in WC reduces cash\n    const netCashFlowBeforeFinancing = cashFromOpsAfterWC - capitalExpenditures;\n\n    const changeInDebt = previousPeriodCalculated\n      ? totalBankLoans - previousPeriodCalculated.totalBankLoans\n      : totalBankLoans - 0; // Assume initial debt was 0 if no prev period or specific opening debt input.\n    const cashFlowFromFinancing = changeInDebt - dividendsPaid;\n\n    const netChangeInCash = netCashFlowBeforeFinancing + cashFlowFromFinancing;\n    const closingCash = openingCashForPeriod + netChangeInCash;\n\n    // --- Balance Sheet Reconstruction (using derived closingCash) ---\n    const estimatedCurrentAssets = closingCash + accountsReceivableValueAvg + inventoryValueAvg; // Updated to use inventoryValueAvg\n    const estimatedTotalAssets = estimatedCurrentAssets + netFixedAssets;\n\n    let currentPeriodEquity;\n    if (periodIndex === 0) {\n      currentPeriodEquity = (periodInput.initialEquity || 0) + retainedProfit;\n    } else {\n      currentPeriodEquity = (previousPeriodCalculated?.equity || 0) + retainedProfit;\n    }\n\n    // Simplified liabilities for balance difference calculation\n    const estimatedCurrentLiabilities = accountsPayableValueAvg; // Highly simplified, missing current portion of debt, other accruals\n    const estimatedNonCurrentLiabilities = totalBankLoans; // Assuming all loans are non-current for simplicity here.\n    const estimatedTotalLiabilities = estimatedCurrentLiabilities + estimatedNonCurrentLiabilities;\n\n    const balanceSheetDifference = estimatedTotalAssets - (estimatedTotalLiabilities + currentPeriodEquity);\n\n    // --- Enhanced Working Capital Analysis ---\n    const arPer100Revenue = revenue ? (accountsReceivableValueAvg / revenue) * 100 : 0;\n    const inventoryPer100Revenue = revenue ? (inventoryValueAvg / revenue) * 100 : 0; // Updated to use inventoryValueAvg\n    const apPer100Revenue = revenue ? (accountsPayableValueAvg / cogs) * 100 : 0; // AP usually vs COGS for consistency with AP days\n    const wcPer100Revenue = revenue ? (workingCapitalValue / revenue) * 100 : 0;\n\n    const fundingGapOrSurplus = -(netCashFlowBeforeFinancing); // Positive = Gap (needs funding)\n\n    const currentPeriodResult = {\n      // Original Inputs (useful for display & AI context)\n      ...periodInput,\n\n      // P&L Calculated\n      revenue, cogs, grossProfit, gmPct: grossMarginPercentage * 100,\n      operatingExpenses, ebitda, depreciationAndAmortisation, ebit, opProfitPct: revenue ? (ebit / revenue) * 100 : 0,\n      netInterestExpenseIncome, extraordinaryItems, pbt, incomeTaxRatePercentageActual: incomeTaxRatePercentage,\n      incomeTax, netProfit, netProfitPct: revenue ? (netProfit / revenue) * 100 : 0,\n      dividendsPaid, retainedProfit, capitalExpenditures,\n\n      // Balance Sheet & WC Calculated/Derived\n      openingCash: openingCashForPeriod,\n      closingCash,\n      accountsReceivableValueAvg, // Inputted Avg value\n      arDaysDerived,              // Derived AR Days\n      inventoryValueAvg,          // Updated to use inventoryValueAvg\n      inventoryDaysDerived,       // Updated to calculate inventoryDaysDerived\n      accountsPayableValueAvg,    // Inputted Avg value\n      apDaysDerived,              // Derived AP Days\n      wcDays,                     // Derived WC Days\n\n      estimatedCurrentAssets, netFixedAssets, estimatedTotalAssets,\n      totalBankLoans, // Input (ending balance)\n      estimatedCurrentLiabilities, // Simplified\n      estimatedNonCurrentLiabilities, // Simplified\n      estimatedTotalLiabilities, // Simplified\n      equity: currentPeriodEquity, balanceSheetDifference,\n\n      // Working Capital Analysis\n      workingCapitalValue, workingCapitalChange,\n      arPer100Revenue, inventoryPer100Revenue, apPer100Revenue, wcPer100Revenue,\n\n      // Cash Flow Analysis\n      operatingCashFlow, cashFromOpsAfterWC, netCashFlowBeforeFinancing,\n      changeInDebt, cashFlowFromFinancing, netChangeInCash, fundingGapOrSurplus,\n    };\n    previousPeriodCalculated = currentPeriodResult;\n    return currentPeriodResult;\n\n  });\n  return calculatedDataAllPeriods;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}